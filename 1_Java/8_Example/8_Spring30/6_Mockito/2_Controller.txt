由於 Controller 是透過用戶端使用 HTTP 呼叫的
所以我們要模擬網路的形式 > 使用 MockMvc 來實作 Controller 層的測試

MockMvc: spring framework 實現了對Http請求的模擬端點測試(不依賴網路環境)
能夠直接使用網路的形式 > 轉換到 Controller 的呼叫

mockMvc.perform: 執行一個請求，並對應到controller
mockMvc.andExpect: 期待並驗證回應是否正確
mockMvc.andReturn: 最後回應的值(body) 可以再利用這個值 做其他Assert驗證
-----------------------------------------------------------------------------
@SpringBootTest
@AutoConfigureMockMvc // 啟動時自動注入MockMvc
public class TestTodoController {
    @Autowired
    private MockMvc mockMvc;

    @Autowired //  json 和 Java Object 互相轉換 https://kucw.github.io/blog/2020/6/java-jackson/
    ObjectMapper objectMapper;

    @MockBean // 創造一個假的Service對象
    TodoService todoService;

    @Test
    public void testGetTodos() throws Exception {
        List<Todo> expectedList = new ArrayList<>();
        Todo todo = new Todo();
        todo.setTask("洗衣服");
        todo.setId(1);
        expectedList.add(todo);

        // 模擬todoService.getTodos() 回傳 expectedList
        Mockito.when(todoService.getTodos()).thenReturn(expectedList);

        // 模擬呼叫[GET] /api/todos
        String returnString = mockMvc.perform(MockMvcRequestBuilders.get("/api/todos")
                        .accept(MediaType.APPLICATION_JSON))
                        .andExpect(status().isOk())
                        .andReturn().getResponse().getContentAsString(StandardCharsets.UTF_8);

        Iterable<Todo> actualList = objectMapper.readValue(returnString, new TypeReference<Iterable<Todo>>() {});
        Assertions.assertEquals(expectedList, actualList);
    }
}