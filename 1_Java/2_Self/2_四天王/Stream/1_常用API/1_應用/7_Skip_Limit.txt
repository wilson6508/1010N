list.stream()
    .filter(用Predicate)
    .map(用Function)
    .forEach(用Consumer)
    .sorted(用Comparator)
    .limit(用long)
    .skip(用long)
    .collect(用Collector);
----------------------------------------------------------------------------------------------------------------------
List<String> list = Arrays.asList("ABC", "B");
Function<String, Integer> function = String::length;
Predicate<Integer> predicate = (i) -> i - 1 > 0;
List<Integer> test = test(list, function, predicate);
System.out.println(test);

List<Integer> list = Arrays.asList(3333, 5);
Function<Integer, String> function = (i) -> "A" + i;
Predicate<String> predicate = (s) -> s.length() > 3;
List<String> test = test(list, function, predicate);
System.out.println(test);

public static <IN, OUT> List<OUT> test(List<IN> list, Function<IN, OUT> function, Predicate<OUT> predicate) {
    return list.stream().map(function).filter(predicate).collect(Collectors.toList());
}
----------------------------------------------------------------------------------------------------------------------